# -*- Makefile -*-
#
# Makefle for re-generating the config-* files when options change

RPMBUILD        = /usr/bin/rpmbuild
RPMDEFINES      = ntopdir builddir sourcedir specdir rpmdir srcrpmdir
RPM             = $(RPMBUILD) --define "_topdir $(SOURCEDIR)" $(foreach def,$(RPMDEFINES),--define "_$(def) %{_topdir}")

KCONFIG         = $(SOURCEDIR)/kconfig.py
MAKECONFIG	= $(SOURCEDIR)/Makefile.config
CONFIGS         = config-generic config-x86_32-generic config-x86_64-generic

KVERSION        = 3.2.1
KARCH		= $(shell uname -m)

KBUILD		= $(firstword $(wildcard $(SOURCEDIR)/linux-$(KVERSION)))

# this target regenerates the config-* files after re-running them through "make oldconfig"
reconfig : reconfig-clean $(KCONFIG) $(CONFIGS)
	mv -v $(CONFIGS) $(SOURCEDIR)/
reconfig-prep : $(addprefix $(SOURCEDIR)/,$(CONFIGS) Makefile.config) $(SPECFILE)
	@echo "preparing new kernel tree for config update"
	set -e ; $(RPM) -bp --without oldconfig $(if $(DEBUG),,--quiet) --target=i686,x86_64 $(SPECFILE)
reconfig-newconfigs :
	set -e ; cd $(KBUILD) ; make -f $(MAKECONFIG) newconfigs $(if $(MENU),OLDCONFIG=menuconfig) VERSION="$(KVERSION)"

K_X32		= kernel-$(KVERSION)-i686.config
K_X64		= kernel-$(KVERSION)-x86_64.config

KALL_CONF	= $(K_X32) $(K_X64)

$(KALL_CONF) : %.config : $(KBUILD)/configs/%.config
	@cp -v $< $@

NEWCONFIGS	= $(addprefix $(KBUILD)/configs/,$(KALL_CONF))
$(NEWCONFIGS) : reconfig-newconfigs
ifeq ($(KBUILD),)
reconfig-clean:
	@echo "Could not find a suitable prepped linux kernel tree to perform config work"
	@echo "You should probably run 'make reconfig-prep' first"
	@exit -1
else
reconfig-clean : $(KBUILD)
	@rm -fv $(KALL_CONF) $(NEWCONFIGS) $(KBUILD)/.config
	@rm -fv $(addprefix $(KBUILD)/,$(KALL_CONF) $(CONFIGS))
	install -v $(addprefix $(SOURCEDIR)/,$(CONFIGS)) $(KBUILD)

config-generic : $(K_X32) $(K_X64)
	$(KCONFIG) --common $^ >$@
config-x86_32-generic : $(K_X32) config-generic
	$(KCONFIG) --diff1 $^ >$@
config-x86_64-generic : $(K_X64) config-generic
	$(KCONFIG) --diff1 $^ >$@
endif

clean ::
	@rm -fv $(CONFIGS) $(KALL_CONF)
