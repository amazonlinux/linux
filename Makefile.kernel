# -*- Makefile -*-
# Makefile for source package: kernel
#
# Module created by 'gafton' on 2012-01-19

ifeq ($(GIT),)
$(error Makefile.common must be included before this Makefile)
endif

#
# Author: Cristian Gafton <gafton@amazon.com>
#

MODULES		= linux
TARFILE		= .tar.gz

# This is used to generate files for a src.rpm file containing a "vanilla"
# linux kernel archive plus patches.
#
# For each module, the *_BASE defines the tag that will get archived as a
# tarball, to serve the purpose of the "original tarball"
#
# The *_HEAD defines the "head" of the module that has patches applied on top
# of the *_BASE. The *_HEAD can be the name of a branch rooted at *_BASE or
# some other tag/commit-id. Every commit between *_BASE and *_HEAD will get
# transformed into a patch and inserted in the appropriate places in the spec
# file.
#
# Other module-specific defines are:
# *_PREFIX	- the name of the top level directory for the tarball
# *_TAR		- name of the tarball archive filename that will get generated
# *_BRANCH	- default branch that shoule be checked out
# *_GIT		- git repository url for this module

include linux.vers
# defines for archive building
linux_TAR	= linux-$(linux_TAGVER)
linux_PREFIX	= $(linux_TAR)/
linux_GIT	= $(shell $(get_fetch_base))/linux.git

MODULES_UPDATE	= $(addsuffix /.update,$(MODULES))
MODULES_NAMES	= $(foreach m,$(MODULES),$(if $($(m)_TAR),$($(m)_TAR),$(m)))
MODULES_FILES	= $(addprefix $(SOURCEDIR)/,$(addsuffix $(TARFILE),$(MODULES_NAMES)))
MODULES_TAR	= $(addsuffix .tar,$(MODULES_NAMES))

%/.update : %/.git Makefile.kernel Makefile | %
	pushd $* ; $(GIT) clean -f -d -x
	pushd $* ; $(if $($*_BRANCH),$(call checkout-branch,$($*_BRANCH)),true)
	touch $@

#sources : $(MODULES_UPDATE)

sources : $(MODULES_FILES)

.SECONDEXPANSION:
$(SOURCEDIR)/%.tar.bz2: %.tar | $(SOURCEDIR)
	bzip2 -f -c $< > $@

$(SOURCEDIR)/%.tar.gz: %.tar | $(SOURCEDIR)
	gzip -f -c $< > $@

$(MODULES) :
	$(GIT) clone --no-hardlinks $($@_GIT) $@

$(addsuffix .tar,$(MODULES)) : %.tar : % %/.git Makefile.kernel Makefile | $(SOURCEDIR)
	$(GIT) archive --format=tar --prefix $($*_PREFIX) --remote=$* $($*_BASE) > $@

# these targets are required to rename the vanilla $module.tar to the desired
# tarfile name. one for each module needing it.
$(linux_TAR).tar : linux.tar
	ln -sf $< $@

#
# KERNEL SRC/RPM BUILDING SUPPORT
#
HEADLOG	= .cl.head

GITDIRS	= $(addsuffix /.git,$(MODULES))

$(CUSTOMSPEC) : $(HEADLOG)

# extract the top level changelog entry that summarizes the makeup of this build
# $1 : the directory to change to
# $2 : what name to use for this module
# $3..$4 : git commit id range, if any
define get_changelist
{ TZ=UTC ; \
pushd $(1)>/dev/null ; \
$(GIT) log --date=short --format=tformat:"  - $(2)/%H $(if $(3),$(3)..$(4):)" $(4) -1 ; \
$(GIT) log --format=tformat:"    - [%h] %s (%ae)" $(if $(3),$(3)..$(4),-1) ; \
echo ; \
popd >/dev/null ; }
endef

$(HEADLOG): $(GITDIRS) $(MAKEFILE_LIST)
	TZ=UTC echo "* $$(date +'%a %b %d %Y') Builder <builder@amazon.com>" > $@
	$(call get_changelist,.,kernel) >> $@
	$(foreach m,$(MODULES),$(call get_changelist,$(m),$(m),$($(m)_BASE),$($(m)_HEAD)) >>$@ ; ) true

clean ::
	rm -fv $(HEADLOG)

# redefine spec file generation to include git logs from submodules
define replace_changelog
$(call get_specfile_changelog,$<) > .cl.spec
$(call get_gitlog_changelog,$(CHANGELOGS)) > .cl.gitlog
$(foreach m,$(MODULES),pushd $(m)>/dev/null; $(call get_gitlog_changelog,,$($(m)_BASE),$($(m)_HEAD)) > ../.cl.$(m); popd>/dev/null ;) true
$(find-common-dir)/sort-changelog.py .cl.spec .cl.gitlog $(addprefix ./.cl.,$(MODULES)) > .cl && \
	rm -f .cl.spec .cl.gitlog $(addprefix ./.cl.,$(MODULES))
sed -i -e "/^%changelog/Iq" $@
sed -i -e "/^%changelog/ r .cl" $@ && rm -f .cl
sed -i -e "/^%changelog/ r $(HEADLOG)" $@ && rm -f $(HEADLOG)
endef

clean ::
	rm -fv $(MODULES_FILES) $(MODULES_TAR) $(addsuffix .tar,$(MODULES))

.SECONDARY : $(MODULES_TAR)

.PHONY:
