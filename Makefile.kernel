# -*- Makefile -*-
# Makefile for source package: kernel
#
# Module created by 'gafton' on 2012-01-19

ifeq ($(GIT),)
$(error Makefile.common must be included before this Makefile)
endif

#
# Author: Cristian Gafton <gafton@amazon.com>
#
TAREXT		= .tar.gz

# This is used to generate files for a src.rpm file containing a "vanilla"
# linux kernel archive plus patches.
#
# For each module, the *_BASE defines the tag that will get archived as a
# tarball, to serve the purpose of the "original tarball"
#
# The *_HEAD defines the "head" of the module that has patches applied on top
# of the *_BASE. The *_HEAD can be the name of a branch rooted at *_BASE or
# some other tag/commit-id. Every commit between *_BASE and *_HEAD will get
# transformed into a patch and inserted in the appropriate places in the spec
# file.
#
# Other module-specific defines are:
# *_PREFIX	- the name of the top level directory for the tarball
# *_TAR		- name of the tarball archive filename that will get generated
# *_BRANCH	- default branch that shoule be checked out
# *_GIT		- git repository url for this module

include linux.vers
# defines for archive building
linux_TAR	= linux-$(linux_TAGVER)
linux_PREFIX	= $(linux_TAR)/
linux_GIT	= $(shell $(get_fetch_base))/linux.git

%/.update : %/.git Makefile.kernel Makefile | %
	pushd $* ; $(GIT) clean -f -d -x
	pushd $* ; $(if $($*_BRANCH),$(call checkout-branch,$($*_BRANCH)),true)
	touch $@

sources : $(SOURCEDIR)/$(linux_TAR)$(TAREXT)

.SECONDEXPANSION:
$(SOURCEDIR)/%.tar.bz2: %.tar | $(SOURCEDIR)
	bzip2 -f -c $< > $@

$(SOURCEDIR)/%.tar.gz: %.tar | $(SOURCEDIR)
	gzip -f -c $< > $@

# extracting source code...
linux :
	$(GIT) clone --no-hardlinks $($@_GIT) $@
linux.tar : %.tar : % %/.git Makefile.kernel Makefile | $(SOURCEDIR)
	$(GIT) archive --format=tar --prefix $($*_PREFIX) --remote=$* $($*_BASE) > $@
$(linux_TAR).tar : linux.tar
	ln -sf $< $@

#
# KERNEL SRC/RPM BUILDING SUPPORT
#
HEADLOG		= $(SOURCEDIR)/head.log
APPLYLOG	= $(SOURCEDIR)/apply.log
PATCHLOG	= $(SOURCEDIR)/patch.log

GITDIRS		= linux/.git

$(CUSTOMSPEC) : $(HEADLOG)

# extract the top level changelog entry that summarizes the makeup of this build
# $1 : the directory to change to
# $2 : what name to use for this module
# $3..$4 : git commit id range, if any
define get_changelist
{ TZ=UTC ; \
pushd $(1)>/dev/null ; \
$(GIT) log --date=short --format=tformat:"  - $(2)/%H $(if $(3),$(3)..$(4):)" $(4) -1 ; \
$(GIT) log --date=short --format=tformat:"    - [%h] %s (%ae) [%ad]" $(if $(3),$(3)..$(4),-10) ; \
echo ; \
popd >/dev/null ; }
endef

$(HEADLOG): $(GITDIRS) $(MAKEFILE_LIST)
	TZ=UTC echo "* $$(date +'%a %b %d %Y') Builder <builder@amazon.com>" > $@
	$(call get_changelist,.,kernel) >> $@
	$(call get_changelist,linux,linux,$(linux_BASE),$(linux_HEAD)) >>$@

$(PATCHLOG) : linux/.git $(MAKEFILE_LIST)
	cd linux ; git format-patch -k -o $(SOURCEDIR) -N $(linux_BASE)..$(linux_HEAD) >$@
	sed -i "s,$(SOURCEDIR)/,,; s/^\(....\)-/Patch\1: \1-/" $@
$(APPLYLOG) : $(PATCHLOG)
	sed "s,.*:,ApplyPatch," <$< >$@

clean ::
	rm -fv $(HEADLOG) $(APPLYLOG) $(PATCHLOG)

# redefine spec file generation to include git logs from submodules
define replace_changelog
$(call get_specfile_changelog,$<) > .cl.spec
$(call get_gitlog_changelog,$(CHANGELOGS)) > .cl.gitlog
pushd linux >/dev/null; $(call get_gitlog_changelog,,$(linux_BASE),$(linux_HEAD)) > ../.cl.linux; popd>/dev/null
$(find-common-dir)/sort-changelog.py .cl.spec .cl.gitlog .cl.linux > .cl && \
	rm -f .cl.spec .cl.gitlog .cl.linux
sed -i -e "/^%changelog/Iq" $@
sed -i -e "/^%changelog/ r .cl" $@ && rm -f .cl
sed -i -e "/^%changelog/ r $(HEADLOG)" $@ && rm -f $(HEADLOG)
endef

specfile sources : add-patches | $(CUSTOMSPEC)
add-patches :  $(CUSTOMSPEC) $(APPLYLOG) $(PATCHLOG)
	sed -i  -e '/__PATCHFILE_TEMPLATE__/ r $(PATCHLOG)' \
		-e '/__APPLYFILE_TEMPLATE__/ r $(APPLYLOG)' \
		$(CUSTOMSPEC)

git-push : git-push-linux

git-push-linux : linux/.git
	pushd linux ; git push origin $(linux_BRANCH):refs/heads/$(linux_BRANCH) ; git push origin --tags ; popd

clean ::
	rm -fv linux.tar $(linux_TAR) *$(TAREXT)

.SECONDARY : $(linux_TAR)

.PHONY:

